temp <- data("iris")
temp
temp <- data("iris")
force(iris)
force(iris)
iris$Species
iris$Species
?which
?which
?which.max
irises <- data("iris")
n <- 50
train_set <- irises[sample(nrow(irises), size = 50),]
nrow(irises)
ncol(irises)
irses
irises
data("iris")
train_set <- irises[sample(nrow(iris), size = 50),]
iris
train_set <- iris[sample(nrow(iris), size = 50),]
train_set_noclass <- train_set[,1:4]
train_set_noclass
test_set <- iris[sample(nrow(iris), size = 50),]
test_set_noclass <- train_set[,1:4]
edistance <- function(x,y,n){
d=0
#n is the dimensions of the vector or # of components
for (i in 1:n){
d=d+(x[i]-y[i])^2
}
d=sqrt(d)
return(d)
}
ncol(train_set_noclass)
for (j in 1:n){ #test rows
#make array for distances
distances = numeric()
#calc distances and store in array
nc = ncol(train_set_noclass)
y <- test_set_noclass[j,]
for (m in 1:n){#train rows
x <- train_set_noclass[m,]
distances[m] <- edistance(x, y, nc)
}
#stitch distances to class
results = data.frame(distances, train_set$Species)
colnames(results) <- c("distance", "species")
#sort results
results <- results[order(distances),]
#take top k entries
kk <- 3 #3 nearest neighbors
cc <- results$species[1:kk]
#tally classes
sumSet=0
sumVer=0
sumVir=0
for (k in 1:kk){
if(cc[k] == "setosa"){
sumSet = sumSet+1
} else if(cc[k] == "versicolor"){
sumVer = sumVer+1
} else {
sumVir = sumVir+1
}
}
#declare classification
#stitch together sums and use which.max
#sum tp/fp/tn/fn
}
View(distances)
?order
View(results)
View(distances)
results
results[1]$distance
results[1]
results[1,1]
results[2]
View(results)
train_set$Species
results <- data.frame(distances, train_set$Species)
results
View(results)
results
View(results)
results$train_set.Species
results[1]
results[1,]
results[,1]
results[1,]
results[1,]$train_set.Species
View(results)
colnames(results) <- c("distance",...,"species_actual")
colnames(results) <- c("distance",..,"species_actual")
colnames(results) <- c(,"species_actual")
exit
exit()
data("iris")
n <- 50
train_set <- iris[sample(nrow(iris), size = 50),]
train_set_noclass <- train_set[,1:4]
test_set <- iris[sample(nrow(iris), size = 50),]
test_set_noclass <- test_set[,1:4]
edistance <- function(x,y,n){
d=0
#n is the dimensions of the vector or # of components
for (i in 1:n){
d=d+(x[i]-y[i])^2
}
d=sqrt(d)
return(d)
}
distances = numeric()
nc = ncol(train_set_noclass[1,])
nc <- ncol(train_set_noclass[1,])
nc
y <- test_set_noclass[1,]
y
x <- train_set_noclass[1,]
edistance(x, y, nc)
edistance <- function(x,y,dimensions){
d=0
#n is the dimensions of the vector or # of components
for (i in 1:dimensions){
d=d+(x[i]-y[i])^2
}
d=sqrt(d)
return(d)
}
edistance(x, y, nc)
distances[1] <- edistance(x,y,nc)
distances
distances[2,1] <- train_set$Species[1]
distances[1,1] <- train_set$Species[1]
distances <- data.frame()
?cbind
distances <- cbind(edistance(x,y,nc), train_set$Species[1])
distances
colnames(distances) <- c("distance", "train_species")
distances
test_set$Species[1]
order_test <- test_set[order(Sepal.Length),]
order_test <- test_set[order(test_set$Sepal.Length),]
View(order_test)
View(test_set)
source('~/School/SP20/Machine_Learning/Homework_1/HW1_iris.R')
View(distances)
View(results)
source('~/School/SP20/Machine_Learning/Homework_1/HW1_iris.R', echo=TRUE)
sumall
source('~/School/SP20/Machine_Learning/Homework_1/HW1_iris.R', echo=TRUE)
source('~/School/SP20/Machine_Learning/Homework_1/HW1_iris.R', echo=TRUE)
warnings()
pred
source('~/School/SP20/Machine_Learning/Homework_1/HW1_iris.R', echo=TRUE)
sumall
sumall[,2]
sumall[,sumall[,4]]==sumall[,4]
sumall[,4]
which(sumall==max(sumall))
which(sumall==max(sumall))==sumall[,4]
source('~/School/SP20/Machine_Learning/Homework_1/HW1_iris.R', echo=TRUE)
which(sumall==max(sumall))==sumall[,4]
source('~/School/SP20/Machine_Learning/Homework_1/HW1_iris.R', echo=TRUE)
source('~/School/SP20/Machine_Learning/Homework_1/HW1_iris.R', echo=TRUE)
source('~/School/SP20/Machine_Learning/Homework_1/HW1_iris.R', echo=TRUE)
?knn
?kNN
knn(aaaaa)
install.packages("class")
library(class)
?knn
setwd("~/School/SP20/Machine_Learning/Homework_1/")
winetrain <- read.csv("winedata.csv")
winetest <- read.csv("winedata_test.csv")
knn(winetrain, winetest, k = 3)
View(winetest)
knn(winetrain, winetest, c)
knn(winetrain, winetest, wintest$c)
knn(winetrain, winetest, winetest$c)
knn(winetrain, winetest, winetrain$c)
knn(winetrain, winetest, winetrain$c, k = 3)
knn(winetrain, winetest, winetrain$c, k = 50)
knn(winetrain, winetest, winetrain$c, k = 1:50)
library(class)
winetrain <- read.csv("winedata.csv")
winetest <- read.csv("winedata_test.csv")
hek <- knn(winetrain, winetest, winetrain$c, k=50)
hek
length(hek)
winetest$c
difference <- hek-winetest$c
difference <- hek[1]-winetest$c[1]
hek <- as.data.frame(hek)
act <- as.data.frame(winetest$c)
hek
act
hek-act
cbind(hek, act)
hek-act
hek[:]-act[:]
hek[1]-act[1]
act <- as.data.frame(winetest$c)
act
act <- winetest$c
hek <- knn(winetrain, winetest, winetrain$c, k = 50)
hek <- as.list(hek)
hek <- as.array(hek)
act <- as.list(hek)
hek-act
hek[1]
hek[24]
for(i in 1:24){
print(hek[i]-act[i])
}
hek
for(i in 1:24){
print(hek[i,1]-act[i,1])
}
hek-5
hek <- c(hek)
act <- c(act)
hek-act
hek^-act
a <- c(10,11,12)
b <- c(1,2,3)
a-b
hek <- numeric(hek)
hek <- as.numeric(hek)
act <- numeric(act)
act <- as.numeric(act)
hek-act
?any
winetrain <- read.csv("winedata.csv")
winetest <- read.csv("winedata_test.csv")
act <- as.numeric(winetest$c)
hek <- as.numeric(knn(winetrain, winetest, winetrain$c, k=1))
library(class)
hek <- as.numeric(knn(winetrain, winetest, winetrain$c, k=1))
hek-act
final_res <- data.frame()
final_res <- cbind(0.65, 0.35)
final_res[1,] <- cbind(0.65, 0.35)
final_res[2,] <- cbind(0.65, 0.35)
final_res <- data.frame()
final_res[1,] <- cbind(0.65, 0.35)
final_res[2,] <- cbind(0.65, 0.35)
final_res[1] <- cbind(0.65, 0.35)
final_res[2] <- cbind(0.65, 0.35)
source('~/School/SP20/Machine_Learning/Homework_1/HW1_wine.R', echo=TRUE)
source('~/School/SP20/Machine_Learning/Homework_1/HW1_wine.R', echo=TRUE)
err
acc
library(ggplot2)
install.packages("tidyverse")
install.packages("tidyverse")
setwd("~/School/SP20/Machine_Learning/Chapter2/")
source('~/School/SP20/Machine_Learning/Chapter2/Simple_Example_3NNreg_spring_2020.R', echo=TRUE)
source('~/School/SP20/Machine_Learning/Chapter2/Simple_Example_3NNreg_spring_2020.R', echo=TRUE)
source('~/School/SP20/Machine_Learning/Chapter2/Simple_Example_3NNreg_spring_2020.R', echo=TRUE)
View(dresults)
View(data1)
setwd("~/School/SP20/Machine_Learning/Homework_1/")
source('~/School/SP20/Machine_Learning/Homework_1/HW1_ohms.R', echo=TRUE)
source('~/School/SP20/Machine_Learning/Homework_1/HW1_ohms.R', echo=TRUE)
train_set_noclass
View(results)
View(test_set)
View(train_set)
source('~/School/SP20/Machine_Learning/Homework_1/HW1_ohms.R', echo=TRUE)
differences
differences^2
differences^2/12
mean(differences^2)
source('~/School/SP20/Machine_Learning/Homework_1/HW1_ohms.R', echo=TRUE)
source('~/School/SP20/Machine_Learning/Homework_1/HW1_ohms.R')
